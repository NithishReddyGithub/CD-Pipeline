trigger:
  enabled: false
resources:
  pipelines:
  - pipeline: ci
    source: "Technical Assessment - ABB"
    trigger:
      enabled: true
pool:
  name: linux-pool
  demands:
  - Agent.Name -equals nithish
stages:
- stage: Deploy_Staging
  displayName: "Deploy to Staging AKS"
  jobs:
  - deployment: staging_deploy
    displayName: "Staging Deployment"
    environment:
      name: staging
    strategy:
      runOnce:
        deploy:
          steps:
          - task: 30f35852-3f7e-4c0c-9a88-e127b4f97211@1
            inputs:
              alias: ci
              artifact: drop
          - task: AzureCLI@2
            displayName: "Authenticate with AKS"
            inputs:
              azureSubscription: 'nithish-aks'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az aks get-credentials \
                  --resource-group nithish-aks-rg \
                  --name nithish-aks-aks \
                  --overwrite-existing
          - task: CmdLine@2
            displayName: "Create namespace if not exists"
            inputs:
              script: |
                kubectl get ns staging || kubectl create ns staging
          - task: CmdLine@2
            displayName: "Apply ConfigMap"
            inputs:
              script: |
                if [ -d configs/staging ]; then
                  kubectl -n staging create configmap app-config \
                    --from-file=configs/staging/ \
                    --dry-run=client -o yaml | kubectl apply -f -
                else
                  echo "No staging config files found, skipping ConfigMap."
                fi
                echo $(Pipeline.Workspace)
          - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
            inputs:
              repository: self
              persistCredentials: true
              clean: true
          - task: CmdLine@2
            inputs:
              script: |
                echo "copying manifests from repo"
                # mkdir -p manifest-files
                ls -R $(Build.SourcesDirectory)/manifests/
                # ls -R manifest-files
          - task: Kubernetes@1
            displayName: "Deploy to Staging AKS"
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: 'nithish-aks'
              azureResourceGroup: 'nithish-aks-rg'
              kubernetesCluster: 'nithish-aks-aks'
              namespace: 'staging'
              command: apply
              useConfigurationFile: true
              configuration: $(Build.SourcesDirectory)/manifests/staging-deployment.yaml
          - task: CmdLine@2
            displayName: "Verify Rollout"
            inputs:
              script: |
                kubectl -n staging rollout status deployment/my-app --timeout=60s
- stage: Deploy_Production
  displayName: "Deploy to Production AKS"
  dependsOn:
  - Deploy_Staging
  condition: succeeded()
  jobs:
  - deployment: production_deploy
    displayName: "Production Deployment"
    environment:
      name: production
    strategy:
      runOnce:
        deploy:
          steps:
          - task: 30f35852-3f7e-4c0c-9a88-e127b4f97211@1
            inputs:
              alias: ci
              artifact: drop
          - task: AzureCLI@2
            displayName: "Authenticate with AKS"
            inputs:
              azureSubscription: 'nithish-aks'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az aks get-credentials \
                  --resource-group nithish-aks-rg \
                  --name nithish-aks-aks \
                  --overwrite-existing
          - task: CmdLine@2
            displayName: "Create namespace if not exists"
            inputs:
              script: |
                kubectl get ns production || kubectl create ns production
          - task: CmdLine@2
            displayName: "Apply ConfigMap"
            inputs:
              script: |
                if [ -d configs/staging ]; then
                  kubectl -n staging create configmap app-config \
                    --from-file=configs/staging/ \
                    --dry-run=client -o yaml | kubectl apply -f -
                else
                  echo "No staging config files found, skipping ConfigMap."
                fi
          - task: Kubernetes@1
            displayName: "Deploy to Production AKS"
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: 'nithish-aks'
              azureResourceGroup: 'nithish-aks-rg'
              kubernetesCluster: 'nithish-aks-aks'
              namespace: 'production'
              command: apply
              useConfigurationFile: true
              configuration: $(Build.SourcesDirectory)/manifests/production-deployment.yaml
          - task: CmdLine@2
            displayName: "Verify Rollout"
            inputs:
              script: |
                kubectl -n production rollout status deployment/my-app --timeout=60s

